{"ast":null,"code":"var _jsxFileName = \"/Users/adina.weinberg/Desktop/seir-angelica/projects/project-3/frontend/react-bookstop/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //minimizing bootstrap use \n\nimport './App.css';\nimport { useLocation } from \"react-router-dom\";\nimport { BrowserRouter, Route, Link, Switch } from 'react-router-dom';\nimport { useState, useEffect, useContext, createContext, useReducer } from 'react';\nimport Navbar from './components/NavBar';\nimport SearchForm from './components/SearchForm';\nimport RegisterForm from './components/RegisterForm';\nimport ReadBooks from './components/ReadBooks';\nimport Home from './components/Home';\nimport LoginForm from './components/LoginForm';\nimport Logout from './components/Logout';\nimport Header from './components/Header';\nimport EditForm from './components/EditForm';\nimport ReadBook from './components/ReadBook/ReadBook';\nimport WishBook from './components/WishBook/WishBook'; // Declare three global useContext contexts to pass state and dispatch context to lower components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext();\nexport const UserAuthStatusContext = /*#__PURE__*/React.createContext();\nexport const UserAuthDispatchContext = /*#__PURE__*/React.createContext();\n\nfunction App() {\n  _s();\n\n  const [currentBook, setCurrentBook] = useState(null);\n  const [user, setUser] = useState(false);\n  let location = useLocation();\n  /*====================================================\n    Login and user session related components\n  =====================================================*/\n  // To initialize the user authentication status\n\n  const initialUserAuth = {\n    _id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    status: '',\n    lastAccess: ''\n  }; // This useReducer hooks calls local functions to handle the requested actions\n\n  function userReducer(state, action) {\n    switch (action.type) {\n      case 'Login':\n        return action.login;\n\n      case 'Logout':\n        return action.login;\n\n      case 'Status':\n        return action.login;\n\n      default:\n        return userAuth;\n    }\n  } // This defines the initial user authentication object and the user auth reducer\n\n\n  const [userAuth, dispatch] = useReducer(userReducer, initialUserAuth); // api call for users & logic to check if user is logged in\n\n  const getUser = async () => {\n    // Check to see if the user is already logged in with a valid session\n    // Sessions are valid for 30 minutes since the user's last interaction with the site\n    if (userAuth && userAuth._id && userAuth.status === 'active' && Date.now() - userAuth.lastAccess < 900) {\n      return;\n    } // The user doesn't appear to have an active session in memory.  We can check to see\n    // if we have stored their BookStop userid in local Web browser key/value storage\n\n\n    const userID = localStorage.getItem('BookStopUser');\n\n    if (userID === null) {\n      return; // If null no stored userID was found.  We don't know who this user is.\n    } // If we made it this far, we have a userID and  can query the database to get the user's \n    // information and see if they are a valid user with a valid active session.  Even if they \n    // are a recognized \"active\" user, we won't give them access unless they have signed in \n    // recently and browsed the site, which is tracked by the lastAccess value.\n\n\n    try {\n      const API_ENDPOINT = `http://localhost:4000/users/${userID}`;\n      const response = await fetch(API_ENDPOINT);\n      const data = await response.json();\n      setUser(data);\n      const userAuthUpdate = {\n        _id: data._id,\n        username: data.username,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        status: data.status,\n        lastAccess: Date.now()\n      };\n      localStorage.setItem('BookStopUser', data._id);\n      dispatch({\n        \"type\": \"Login\",\n        \"login\": userAuthUpdate\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Get the logged in user when this page mounts or reloads\n\n\n  useEffect(() => {\n    getUser(); // eslint-disable-next-line\n  }, []); // This function simple calls the backend API and updates the user's lastaccess time in seconds since the epoch\n  // We do this so we know when the user is inactive, in which case we consider them logged off.\n\n  const _userSessionKeepAlive = async () => {\n    const API_ENDPOINT = `http://localhost:4000/users/status:${userAuth._id}`; //console.log(values)\n\n    try {\n      const response = await fetch(API_ENDPOINT, {\n        method: 'PUT',\n        body: JSON.stringify({}),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        const data = await response.json();\n        const userAuthUpdate = {\n          _id: data._id,\n          username: data.username,\n          firstName: data.firstName,\n          lastName: data.lastName,\n          status: data.status,\n          lastAccess: Date.now()\n        };\n        localStorage.setItem('BookStopUser', data._id);\n        dispatch({\n          \"type\": \"Login\",\n          \"login\": userAuthUpdate\n        });\n      } else {\n        console.log(`Something went wrong with updating the user's session.`);\n      }\n    } catch (error) {\n      console.error(`Something went wrong with updating the user's session.`);\n      console.error(error);\n    }\n  }; // Whenever there is a change in location we assume the user is continuing their session, so we will update\n  // their lastAccess value in the database, if they are a logged in user.\n\n\n  useEffect(() => {\n    if (userAuth && userAuth._id && userAuth.status === 'active') {\n      _userSessionKeepAlive();\n    } // eslint-disable-next-line\n\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserAuthStatusContext.Provider, {\n      value: userAuth,\n      children: /*#__PURE__*/_jsxDEV(UserAuthDispatchContext.Provider, {\n        value: dispatch,\n        children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n          value: {\n            user,\n            getUser,\n            currentBook,\n            setCurrentBook\n          },\n          children: [/*#__PURE__*/_jsxDEV(Navbar, {\n            value: userAuth._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n            children: /*#__PURE__*/_jsxDEV(Switch, {\n              children: [/*#__PURE__*/_jsxDEV(Route, {\n                path: \"/read-books/:bookId\",\n                component: ReadBook\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/wish-book/:bookId\",\n                component: WishBook\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/register\",\n                component: RegisterForm\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/login\",\n                component: LoginForm\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/logout\",\n                component: Logout\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/home\",\n                component: Home\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/\",\n                component: Home\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n} // This function stores a file log into local storage in a web storage variable called BookStop.log\n// This provides some unique debugging opportunities to trace events and refreshes when the Web console log\n// may be clearing on the browser.\n\n\n_s(App, \"pmugmzvLebZr7Rmc6fJOXCzaTjo=\", false, function () {\n  return [useLocation];\n});\n\n_c = App;\n\nfunction storage_log(logValue) {\n  const previousValue = localStorage.getItem(\"BookStop.log\");\n\n  if (typeof logValue === 'object') {\n    const logValueJSON = JSON.stringify(logValue);\n    localStorage.setItem(\"BookStop.log\", `${previousValue}\\n${typeof logValue}\\n${logValue}\\n${logValueJSON}`);\n  } else {\n    localStorage.setItem(\"BookStop.log\", `${previousValue}\\n${typeof logValue}\\n${logValue}\\n`);\n  }\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/adina.weinberg/Desktop/seir-angelica/projects/project-3/frontend/react-bookstop/src/App.js"],"names":["React","useLocation","BrowserRouter","Route","Link","Switch","useState","useEffect","useContext","createContext","useReducer","Navbar","SearchForm","RegisterForm","ReadBooks","Home","LoginForm","Logout","Header","EditForm","ReadBook","WishBook","UserContext","UserAuthStatusContext","UserAuthDispatchContext","App","currentBook","setCurrentBook","user","setUser","location","initialUserAuth","_id","username","firstName","lastName","status","lastAccess","userReducer","state","action","type","login","userAuth","dispatch","getUser","Date","now","userID","localStorage","getItem","API_ENDPOINT","response","fetch","data","json","userAuthUpdate","setItem","err","console","log","_userSessionKeepAlive","method","body","JSON","stringify","headers","error","storage_log","logValue","previousValue","logValueJSON"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';   //minimizing bootstrap use \nimport './App.css';\n\nimport { useLocation } from \"react-router-dom\";\nimport { BrowserRouter, Route, Link, Switch } from 'react-router-dom';\nimport { useState, useEffect, useContext, createContext, useReducer } from 'react';\n\nimport Navbar from './components/NavBar';\nimport SearchForm from './components/SearchForm';\nimport RegisterForm from './components/RegisterForm';\nimport ReadBooks from './components/ReadBooks';\nimport Home from './components/Home';\nimport LoginForm from './components/LoginForm';\nimport Logout from './components/Logout';\nimport Header from './components/Header'\nimport EditForm from './components/EditForm';\nimport ReadBook from './components/ReadBook/ReadBook';\nimport WishBook from './components/WishBook/WishBook';\n\n// Declare three global useContext contexts to pass state and dispatch context to lower components\nexport const UserContext = React.createContext(); \nexport const UserAuthStatusContext = React.createContext();\nexport const UserAuthDispatchContext = React.createContext(); \n\nfunction App() {\n  const [currentBook, setCurrentBook] = useState(null);\n  const [user, setUser] = useState(false);\n  let location = useLocation();\n  \n  /*====================================================\n    Login and user session related components\n  =====================================================*/\n\n  // To initialize the user authentication status\n  const initialUserAuth = {\n    _id: '',\n    username: '',\n    firstName: '',\n    lastName: '',\n    status: '',\n    lastAccess: '',\n  }\n\n  // This useReducer hooks calls local functions to handle the requested actions\n  function userReducer(state, action) {\n\n    switch (action.type) {\n      case 'Login':\n        return action.login;\n      case 'Logout':\n        return action.login;\n      case 'Status':\n        return action.login;   \n      default:\n        return userAuth;\n    }\n  }\n\n  // This defines the initial user authentication object and the user auth reducer\n  const [userAuth, dispatch] = useReducer(userReducer, initialUserAuth);\n\n  // api call for users & logic to check if user is logged in\n  const getUser = async () => {\n\n    // Check to see if the user is already logged in with a valid session\n    // Sessions are valid for 30 minutes since the user's last interaction with the site\n    if ( (userAuth) && (userAuth._id) && (userAuth.status==='active') && ( (Date.now()-userAuth.lastAccess)<900) ) {\n        return;\n    }\n\n    // The user doesn't appear to have an active session in memory.  We can check to see\n    // if we have stored their BookStop userid in local Web browser key/value storage\n    const userID = localStorage.getItem('BookStopUser');\n    if (userID===null) {\n      return;  // If null no stored userID was found.  We don't know who this user is.\n    }\n\n    // If we made it this far, we have a userID and  can query the database to get the user's \n    // information and see if they are a valid user with a valid active session.  Even if they \n    // are a recognized \"active\" user, we won't give them access unless they have signed in \n    // recently and browsed the site, which is tracked by the lastAccess value.\n\n    try {\n      const API_ENDPOINT = `http://localhost:4000/users/${userID}`;\n      const response = await fetch (API_ENDPOINT);\n      const data = await response.json();\n      \n      setUser(data);\n\n      const userAuthUpdate = { _id: data._id, \n        username: data.username,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        status: data.status,\n        lastAccess: Date.now(),\n      }\n      localStorage.setItem('BookStopUser', data._id );\n      dispatch( {\"type\": \"Login\", \"login\": userAuthUpdate});\n\n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n  // Get the logged in user when this page mounts or reloads\n  useEffect(() => {\n    getUser();\n    // eslint-disable-next-line\n  }, []);\n\n  // This function simple calls the backend API and updates the user's lastaccess time in seconds since the epoch\n  // We do this so we know when the user is inactive, in which case we consider them logged off.\n\n  const _userSessionKeepAlive = async () => {\n    const API_ENDPOINT = `http://localhost:4000/users/status:${userAuth._id}`;\n    //console.log(values)\n    try {\n        const response = await fetch(API_ENDPOINT, {\n            method: 'PUT',\n            body: JSON.stringify({}),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        \n        if (response.status === 200) {\n          const data = await response.json();  \n          const userAuthUpdate = { _id: data._id, \n            username: data.username,\n            firstName: data.firstName,\n            lastName: data.lastName,\n            status: data.status,\n            lastAccess: Date.now(),\n          }\n          localStorage.setItem('BookStopUser', data._id );\n          dispatch( {\"type\": \"Login\", \"login\": userAuthUpdate});        \n        }\n        else {\n          console.log(`Something went wrong with updating the user's session.`);\n        }\n    } catch (error) {\n        console.error(`Something went wrong with updating the user's session.`);\n        console.error(error)\n    }\n}\n\n  // Whenever there is a change in location we assume the user is continuing their session, so we will update\n  // their lastAccess value in the database, if they are a logged in user.\n  useEffect ( () => {\n    if ( (userAuth) && (userAuth._id) && (userAuth.status==='active') ) { \n      _userSessionKeepAlive();\n    }\n     // eslint-disable-next-line\n  }, [location] );\n\n\n  return (\n\n    <BrowserRouter>\n    <UserAuthStatusContext.Provider value={userAuth}>\n      <UserAuthDispatchContext.Provider value={dispatch}>   \n        <UserContext.Provider value={{\n              user, \n              getUser,\n              currentBook,\n              setCurrentBook\n        }}>\n\n      <Navbar value={userAuth._id}/>\n      <Header/>\n      \n      \n      <main>\n        <Switch>\n            <Route\n              path='/read-books/:bookId'\n              component={ReadBook}\n            />\n            <Route\n              path='/wish-book/:bookId'\n              component={WishBook}\n            />\n                \n            <Route\n              path='/register'\n              component={RegisterForm}\n            />\n            <Route\n              path='/login'\n              component={LoginForm}\n            />            \n            <Route\n              path='/logout'\n              component={Logout}\n            />    \n            <Route\n              path='/home'\n              component={Home}\n            />\n            <Route\n              path='/'\n              component={Home}\n            />  \n\n        </Switch>\n       \n        \n      </main>\n\n        </UserContext.Provider>\n       </UserAuthDispatchContext.Provider>\n      </UserAuthStatusContext.Provider>\n      </BrowserRouter>\n\n\n  );\n}\n\n// This function stores a file log into local storage in a web storage variable called BookStop.log\n// This provides some unique debugging opportunities to trace events and refreshes when the Web console log\n// may be clearing on the browser.\n\nfunction storage_log(logValue) {\n\n  const previousValue = localStorage.getItem(\"BookStop.log\");\n\n  if (typeof logValue==='object') {\n    const logValueJSON = JSON.stringify(logValue);\n    localStorage.setItem(\"BookStop.log\", `${previousValue}\\n${typeof logValue}\\n${logValue}\\n${logValueJSON}`);\n  }\n  else {\n    localStorage.setItem(\"BookStop.log\", `${previousValue}\\n${typeof logValue}\\n${logValue}\\n`);\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}